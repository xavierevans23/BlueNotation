@inject MidiService MidiService
@inject DataService DataService

@page "/"

<h1>Hello, world!</h1>

<p>@(MidiService.DeviceName)</p>
<p>@(MidiService.MidiError)</p>
<p>@(MidiService.MidiStatus)</p>
<p>@_latest</p>

<Stave @ref="_stave"/>

@code{
    private string? _latest;
    private Stave? _stave;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            MidiService.StatusChanged += Update;
            MidiService.NoteDown += Output;
            await MidiService.StartConnection();
            await RunTest();
        }
    }

    private async void Update(object? sender, EventArgs e)
    {
        Console.WriteLine("Midi update");
        await InvokeAsync(StateHasChanged);

        if (_stave is not null)
        {
            await _stave.SetDisplay();
        }
    }

    private async void Output(object? sender, int note)
    {
        Console.WriteLine(note);
        _latest = note.ToString();
        await InvokeAsync(StateHasChanged);

        if (_stave is not null)
        {
            await _stave.SetDisplay(new List<Note> { NoteHelper.GetNote(note, new(Letter.D, Accidental.Flat)) }, false, new(Letter.D, Accidental.Flat));
        }
    }

    private async Task RunTest()
    {
        var stats = DataService.Statistics;
        stats.TotalNotesPlayed = 5;

        await DataService.SaveData();
        await DataService.LoadData();

        Console.WriteLine(DataService.Statistics.TotalNotesPlayed);
    }
}