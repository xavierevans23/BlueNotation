@inject MidiService MidiService
@inject DataService DataService
@inject ConductorService ConductorService
@inject IDialogService DialogService

<SelectPreset></SelectPreset>

<div class="FillArea" style="display: flex; flex-direction: column; background-color: white; ">
    <div style="min-width: 0; min-height: 0; overflow: hidden;">
        <Stave @ref="_stave" />
    </div>

    @if (_topOverlay is not null || _bottomOverlay is not null)
    {
        <div style="display: flex; align-items: center; justify-content: center; flex-direction: column;" class="FillArea">
            <h1>@_topOverlay</h1>
            <h2>@_bottomOverlay</h2>
            <div style="height: 96px;"></div>
        </div>
    }

    @if (_leftText is not null || _rightText is not null)
    {
        <div style="display: flex; align-items: flex-start; justify-content: space-between; flex-direction: row;  padding: 24px" class="FillArea">
            <h1>@_leftText</h1>
            <h1>@_rightText</h1>
        </div>
    }

    @if (_showStats)
    {
        <div style="display: flex; align-items: center; justify-content: center; flex-direction: column;" class="FillArea">

            @if (_session is NotesSession notes)
            {
                <div style="display: flex; flex-direction: row;">
                    <div style="display: flex; justify-content: space-around; flex-direction: column">
                        @if (notes.TotalNotesPlayed == 0)
                        {
                            <p class="bigText">0%</p>
                        }
                        else
                        {
                            <p class="bigText">@((notes.TotalPerfect * 100) / (notes.TotalNotesPlayed))%</p>
                        }
                    </div>

                    <div style="width: 36px"></div>

                    <div style="display: flex; justify-content: space-around; align-items:center; flex-direction: column;">
                        @if (notes.TotalNotesPlayed == 0)
                        {
                            <h1 class="bigText">0</h1>
                        }
                        else
                        {
                            <h1>@(notes.TotalPerfect) / @(notes.TotalNotesPlayed)</h1>
                        }

                        <h1>@(_timer.Elapsed.ToString(@"mm\:ss"))</h1>
                    </div>
                </div>

                <div style="flex-basis: 36px;"></div>

                <div style="display: flex; flex-direction: row;">
                    <div style="display: flex; flex-direction: column; align-items: center;">
                        <h1>Treble</h1>

                        <div style="flex-basis: 8px;"></div>

                        <MudTable Items="notes.GetTrebleNoteStatistics()" Elevation="10" Dense="true" Hover="true" Style="overflow-x: auto;">
                            <HeaderContent>

                                <MudTh><MudTableSortLabel SortBy="new Func<KeyValuePair<Note, Data.StatisticsItemHistory>, object>(x=>NoteHelper.GetMidi(x.Key))">Note</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="new Func<KeyValuePair<Note, Data.StatisticsItemHistory>, object>(x=>((x.Value.TimesPlayed * 100) / x.Value.Attempts))">Accuracy</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="new Func<KeyValuePair<Note, Data.StatisticsItemHistory>, object>(x=>((((x.Value.Latency) / (x.Value.TimesPlayed * 10)) / 100f)))">Time</MudTableSortLabel></MudTh>
                            </HeaderContent>

                            <RowTemplate>
                                <MudTd DataLabel="Note">@context.Key</MudTd>
                                <MudTd DataLabel="Accuracy">@((context.Value.TimesPlayed * 100) / context.Value.Attempts)%</MudTd>
                                <MudTd DataLabel="Time">@((((context.Value.Latency) / (context.Value.TimesPlayed * 10)) / 100f).ToString("0.00"))</MudTd>
                                </RowTemplate>
                        </MudTable>
                    </div>

                    <div style="width: 16px;"></div>

                    <div style="display: flex; flex-direction: column; align-items: center;">
                        <h1>Bass</h1>

                        <div style="flex-basis: 8px;"></div>

                            <MudTable Items="notes.GetBassNoteStatistics()" Elevation="10" Dense="true" Hover="true" Style="overflow-x: auto;">
                                <HeaderContent>

                                    <MudTh><MudTableSortLabel SortBy="new Func<KeyValuePair<Note, Data.StatisticsItemHistory>, object>(x=>NoteHelper.GetMidi(x.Key))">Note</MudTableSortLabel></MudTh>
                                    <MudTh><MudTableSortLabel SortBy="new Func<KeyValuePair<Note, Data.StatisticsItemHistory>, object>(x=>((x.Value.TimesPlayed * 100) / x.Value.Attempts))">Accuracy</MudTableSortLabel></MudTh>
                                    <MudTh><MudTableSortLabel SortBy="new Func<KeyValuePair<Note, Data.StatisticsItemHistory>, object>(x=>((((x.Value.Latency) / (x.Value.TimesPlayed * 10)) / 100f)))">Time</MudTableSortLabel></MudTh>
                                </HeaderContent>

                                <RowTemplate>
                                    <MudTd DataLabel="Note">@context.Key</MudTd>
                                    <MudTd DataLabel="Accuracy">@((context.Value.TimesPlayed * 100) / context.Value.Attempts)%</MudTd>
                                <MudTd DataLabel="Time">@((((context.Value.Latency) / (context.Value.TimesPlayed * 10)) / 100f).ToString("0.00"))</MudTd>
                                </RowTemplate>
                            </MudTable>
                    </div>
                </div>
            }

            @if (_session is KeysSession keys)
            {
                <div style="display: flex; flex-direction: row;">
                    <div style="display: flex; justify-content: space-around; flex-direction: column">
                        <p class="bigText">@((keys.TotalScalePerfect * 100) / (keys.TotalScalesPlayed))%</p>
                    </div>

                    <div style="width: 36px"></div>

                    <div style="display: flex; justify-content: space-around; align-items:center; flex-direction: column;">
                        <h1>@(keys.TotalScalePerfect) / @(keys.TotalScalesPlayed)</h1>

                        <h1>@(_timer.Elapsed.ToString(@"mm\:ss"))</h1>
                    </div>
                </div>

                <div style="flex-basis: 36px;"></div>

                <div style="display: flex; flex-direction: column; align-items: center;">

                    <MudSimpleTable Elevation="10" Dense="true" Hover="true" Style="overflow-x: auto;">
                        <thead>
                            <tr>
                                <th>Key</th>
                                <th>Accuracy</th>
                                <th>Time</th>
                            </tr>
                        </thead>

                        <tbody>
                            @foreach (var key in keys.GetKeyStatistics())
                            {
                                <tr>
                                    <td>@(key.Key)</td>
                                    <td>@((key.Value.TimesPlayed * 100) / key.Value.Attempts)%</td>
                                    <td>@((((key.Value.Latency) / (key.Value.TimesPlayed * 10)) / 100f).ToString("0.00"))</td>
                                </tr>
                            }
                        </tbody>
                    </MudSimpleTable>
                </div>
            }
        </div>
    }

    <MudPaper Elevation="10" Class="ma-5">
        <MudToolBar Style="padding-left: 8px; padding-right: 0px;">
            <MudTooltip Placement="Placement.Top" Delay="600" Text="@(_showPlayButton ? "Play" : "Pause")">
                <MudIconButton OnClick="PlayPausePressed" Icon="@(_showPlayButton ? Icons.Material.Outlined.PlayArrow : Icons.Material.Outlined.Pause)" />
            </MudTooltip>

            <MudTooltip Placement="Placement.Top" Delay="600" Text="Restart">
                <MudIconButton OnClick="RestartPressed" Icon="@Icons.Material.Outlined.Replay" />
            </MudTooltip>

            @if (!_disableFinishButton)
            {
                <MudTooltip Placement="Placement.Top" Delay="600" Text="See results">
                    <MudIconButton OnClick="FinishPressed" Icon="@Icons.Material.Outlined.Done" Class="mr-5" />
                </MudTooltip>
            }

            <MudSpacer />

            <div class="@_noteTextCss">
                <MudAlert Style="min-width: 216px" ContentAlignment="HorizontalAlignment.Center" Severity="@_noteTextSeverity" Variant="Variant.Filled" NoIcon="@_noteTextNoIcon" Class="my-2">@_noteText</MudAlert>
            </div>

            <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                <MudMenuItem OnClick="PresetsPressed" Icon="@Icons.Material.Outlined.FolderOpen">Load preset</MudMenuItem>
                <MudMenuItem OnClick="StatisticsPressed" Icon="@Icons.Material.Outlined.Insights">Statistics</MudMenuItem>
                <MudMenuItem OnClick="OptionsPressed" Icon="@Icons.Material.Outlined.Tune">Options</MudMenuItem>
            </MudMenu>
        </MudToolBar>
    </MudPaper>

</div>